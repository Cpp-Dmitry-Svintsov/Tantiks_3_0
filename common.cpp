#include "common.h"


//===============================================================================================================================
// pos elem for node elem structure
//===============================================================================================================================
SCoord::SCoord()
{}
//-----------------------------------------
SCoord::SCoord(int x, int y)
	:X(x), Y(y)
{}
//-----------------------------------------
bool SCoord::operator<(const SCoord& other) const
{
	return (this->X < other.X || (this->X == other.X && this->Y < other.Y));
}
//-----------------------------------------
bool SCoord::operator==(const SCoord& other) const
{
	return (this->X == other.X && this->Y == other.Y);
}
//-----------------------------------------
bool SCoord::operator!=(const SCoord& other) const
{
	bool res1 = false;
	bool res2 = false;

	if (this->X != other.X)
		res1 = true;

	if (this->Y != other.Y)
		res2 = true;

	if (res1 || res2)
		return true;
	else
		return false;
}
//-----------------------------------------
void SCoord::operator=(const SCoord& other)
{
	this->X = other.X;
	this->Y = other.Y;
}
//===============================================================================================================================
void SCoord::operator+(const SCoord& other)
{
	this->X += other.X;
	this->Y += other.Y;
}
//-----------------------------------------
void SCoord::operator+=(const SCoord& other)
{
	this->X += other.X;
	this->Y += other.Y;
}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================



sf::Texture *AStatic_Object::Texture = nullptr;
int AStatic_Object::Count_Of_Objects = 0;
//===============================================================================================================================
// constructor & destructor
//===============================================================================================================================
AStatic_Object::~AStatic_Object()
{
	--AStatic_Object::Count_Of_Objects;

	//delete static texture if ob
	if (AStatic_Object::Count_Of_Objects <= 0)
	{
		delete AStatic_Object::Texture;
		AStatic_Object::Texture = nullptr;
	}
}
AStatic_Object::AStatic_Object(int x, int y, EStatic_Obj_Type obj_type)
	:Hp(1), Obj_Type(obj_type), CX(x), CY(y)
{
	int ceil_size = AsSettings::Ceil_Size;

	++AStatic_Object::Count_Of_Objects;

	//load texture one time
	if (AStatic_Object::Texture == nullptr)
	{
		Texture = new sf::Texture();
		Texture->loadFromFile("textures/static_obj.png");
	}

	//accept texture to sprite
	Sprite.setTexture(*AStatic_Object::Texture);

	//set sprite tu cur pos !!in the center of the cur ceil!!
	Sprite.setOrigin(sf::Vector2f(25.f, 25.f));
	Sprite.setPosition(Sprite.getOrigin().x + ceil_size * (float)x,
		Sprite.getOrigin().y + ceil_size * (float)y);

	//set texture rect size
	Texure_Rect.left = ((int)obj_type - 1) * ceil_size;
	Texure_Rect.top;
	Texure_Rect.width = ceil_size;
	Texure_Rect.height = ceil_size;

	Start_Texture_Rect = Texure_Rect;
	Start_Pos = Sprite.getPosition();

	switch (obj_type)
	{
	case EStatic_Obj_Type::Brick:
		Hp = 3;
		break;
	case EStatic_Obj_Type::Barrel:
		Hp = 1;
		break;
	case EStatic_Obj_Type::Enemy_Base:
		Hp = 4;
		break;
	case EStatic_Obj_Type::Player_Base:
		Hp = 4;
		break;
	default:
		break;
	}
}
//===============================================================================================================================
// public section:
//===============================================================================================================================
void AStatic_Object::Draw(sf::RenderWindow& window)
{
	Sprite.setTextureRect(Texure_Rect);
	window.draw(Sprite);
}
//===============================================================================================================================
bool AStatic_Object::Hit(EDirection dir)
{
	sf::Vector2f pos;
	int cut_offset = 14;

	switch (Obj_Type)
	{
	case EStatic_Obj_Type::Brick:
	{
		--Hp;
		switch (dir)
		{
		case EDirection::Top:
			Texure_Rect.height -= cut_offset;
			break;
		case EDirection::Right:
			pos = Sprite.getPosition();
			Sprite.setPosition(pos.x + cut_offset, pos.y);
			Texure_Rect.left += cut_offset;
			Texure_Rect.width -= cut_offset;
			break;
		case EDirection::Bottom:
			pos = Sprite.getPosition();
			Sprite.setPosition(pos.x, pos.y + cut_offset);
			Texure_Rect.top += cut_offset;
			Texure_Rect.height -= cut_offset;
			break;
		case EDirection::Left:
			Texure_Rect.width -= cut_offset;
			break;
		default:
			break;
		}
	}
		break;
	case EStatic_Obj_Type::Barrel:
		--Hp;
		break;
	case EStatic_Obj_Type::Enemy_Base:
		--Hp;
		break;
	case EStatic_Obj_Type::Player_Base:
		--Hp;
		break;
	default:
		break;
	}

	if (Hp <= 0)
		return false;
	else
		return true;
}
//===============================================================================================================================
void AStatic_Object::Get_Start_Pos(sf::Vector2f& pos)
{
	pos = Start_Pos - Sprite.getOrigin();
}
//===============================================================================================================================
void AStatic_Object::Get_Ceil_Pos(int& x, int& y)
{
	x = CX;
	y = CY;
}
//===============================================================================================================================
int AStatic_Object::Get_Hp()
{
	return Hp;
}
//===============================================================================================================================
EStatic_Obj_Type AStatic_Object::Get_Type()
{
	return Obj_Type;
}
//===============================================================================================================================
sf::Vector2f AStatic_Object::Get_Pos()
{
	return Sprite.getPosition() - Sprite.getOrigin();
}
//===============================================================================================================================
sf::Sprite& AStatic_Object::Get_Sprite()
{
	return Sprite;
}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================


//===============================================================================================================================
// interface collision cheker for level
//===============================================================================================================================
ALevel_Collision_Cheker::~ALevel_Collision_Cheker()
{}
ALevel_Collision_Cheker::ALevel_Collision_Cheker()
{}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================


//===============================================================================================================================
// interface get sprite for oject
//===============================================================================================================================
AObject_Get_Sprite::~AObject_Get_Sprite()
{}
AObject_Get_Sprite::AObject_Get_Sprite()
{}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================

//===============================================================================================================================
// interface for Level -> to get fro every Enemy
//===============================================================================================================================
EsLevel_Interface_For_Enemy::~EsLevel_Interface_For_Enemy()
{}
EsLevel_Interface_For_Enemy::EsLevel_Interface_For_Enemy()
{}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================

//===============================================================================================================================
// interface for engine
//===============================================================================================================================
AEngine_Interface_For_Info_Pannel::~AEngine_Interface_For_Info_Pannel()
{}
AEngine_Interface_For_Info_Pannel::AEngine_Interface_For_Info_Pannel()
{}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================